#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Elparser
  class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    10,    21,    11,    12,    16,    13,    14,    15,    10,    26,
    11,    12,   nil,    13,    14,    15,    10,    19,    11,    12,
   nil,    13,    14,    15,    10,   nil,    11,    12,   nil,    13,
    14,    15,    10,    24,    11,    12,    23,    13,    14,    15 ]

racc_action_check = [
     0,    16,     0,     0,     1,     0,     0,     0,    23,    25,
    23,    23,   nil,    23,    23,    23,    10,    10,    10,    10,
   nil,    10,    10,    10,    13,   nil,    13,    13,   nil,    13,
    13,    13,    18,    18,    18,    18,    18,    18,    18,    18 ]

racc_action_pointer = [
    -2,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,   nil,   nil,    22,   nil,   nil,     1,   nil,    30,   nil,
   nil,   nil,   nil,     6,   nil,     6,   nil ]

racc_action_default = [
   -19,   -19,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
   -19,   -12,   -13,   -19,   -17,   -18,   -19,    -9,   -19,   -11,
   -16,    27,   -10,   -19,   -15,   -19,   -14 ]

racc_goto_table = [
     2,     1,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    17,   nil,   nil,    20,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,    25 ]

racc_goto_check = [
     2,     1,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,   nil,     2,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    -8 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 11, :_reduce_1,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none,
  1, 20, :_reduce_9,
  2, 20, :_reduce_10,
  2, 13, :_reduce_11,
  1, 14, :_reduce_12,
  1, 14, :_reduce_13,
  5, 15, :_reduce_14,
  3, 18, :_reduce_15,
  2, 19, :_reduce_16,
  1, 16, :_reduce_17,
  1, 17, :_reduce_18 ]

racc_reduce_n = 19

racc_shift_n = 27

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  ")" => 3,
  :INTEGER => 4,
  :FLOAT => 5,
  "." => 6,
  "'" => 7,
  :SYMBOL => 8,
  :STRING => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\")\"",
  "INTEGER",
  "FLOAT",
  "\".\"",
  "\"'\"",
  "SYMBOL",
  "STRING",
  "$start",
  "target",
  "sexp",
  "nil",
  "val",
  "cons",
  "symbol",
  "string",
  "list",
  "quoted",
  "sexp_seq" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 3)
  def _reduce_1(val, _values, result)
    
    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_9(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_10(val, _values, result)
     result << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_11(val, _values, result)
           result = SExpNil.new
   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_12(val, _values, result)
     result = SExpNumber.int(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_13(val, _values, result)
     result = SExpNumber.float(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_14(val, _values, result)
           if val[1].size == 1 then
          result = SExpCons.new(val[1][0], val[3])
       else
          result = SExpListDot.new(val[1], val[3])
       end
   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_15(val, _values, result)
           result = SExpList.new(val[1])
   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_16(val, _values, result)
           result = SExpQuoted.new(val[1])
   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_17(val, _values, result)
           result = SExpSymbol.new(val[0])
   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_18(val, _values, result)
           result = SExpString.new(val[0])
   
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Elparser
